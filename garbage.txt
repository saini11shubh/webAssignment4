const express = require("express");
const userRouter = express.Router();
const dotenv = require('dotenv')
dotenv.config();
const initMB = require('messagebird');
const messagebird = initMB('');
const bcrypt = require("bcrypt")
const otpGenerator = require('otp-generator');
const jwt = require('jsonwebtoken')
const SECRET_KEY = 'ndkenskcnksnckndkcndnkcnekwn'
const SignupData = require("../models/schema.js");
const path = require('path')
var validator = require('validator');
// userRouter.get("/submit", async (req, res) => {
//     res.send("signup")
// });

var otp, emailphone;
userRouter.post("/signup", async (req, res) => {
    emailphone = req.body;
    //  try {
    //     const existingUser = await SignupData.find({"user_OTP.mobile_no":emailphone})
    //    // console.log(existingUser)
    //     console.log("isssssssssssssssss"+existingUser)
    //     if (existingUser) {
    //         return res.status(400).json({ message: "User already exist" })
    //     }
    //const otp = "123456"
    res.sendFile(path.join(__dirname, '../views/verify.html'))

    otp = Math.floor((Math.random() * 1000000) + 1);
    console.log(otp);
      const newUser=await SignupData.create({
        user_OTP:
            {
                mobile_no:emailphone,
                otp:otp
            }

       })
      const token=jwt.sign({id:newUser._id},SECRET_KEY)
      const result=await newUser.save()
      return res.json({status:201,message:'user created', data:result, token:token })


    // } catch (error) {
    //     console.log(error);
    //     res.status(500).send({ message: "Internal Server Error" })
    // }
    // console.log(req.body)
    // res.status(200).send(req.body);

    /*
    1.it's here generate otp and save this otp in global variable
    2. then get a value from req.body and compare our req.body==global variable if matche then open detials.html page and if not compare then we send a correct otp message  

    */
});

userRouter.post("/details", async (req, res) => {
    //user details and user_otp  save data on mongodb

    if (otp != req.body.otp) {
        res.status(200).send({ message: "please Enter valid otp " })
    }

    res.sendFile(path.join(__dirname, '../views/details.html'))
    //res.status(200).send({message:"you login successfully"})

});

userRouter.post('/register', async (req, res) => {

   
    if (!validator.isAlpha(req.body.first_name)) {
        return res.status(400).json({ response: 'Invalid first name' });
    }
    if (!validator.isAlpha(req.body.last_name)) {
        return res.status(400).json({ response: 'Invalid last name' });
    }

    if (!validateMobileno(req.body.phone_no)) {
        //throw new Error('Invalid mobile number!');
        return res.status(400).json({ response: 'Invalid mobile no' });
    }

    if (!validator.isEmail(req.body.email)) {
        return res.status(400).json({ response: 'Invalid Email' });
    }



    if (!validator.isAlpha(req.body.state)) {
        return res.status(400).json({ response: 'Enter valid state' });
    }
    if (!validator.isAlpha(req.body.country)) {
        return res.status(400).json({ response: 'Enter valid country' });
    }


    if (!validator.isStrongPassword(req.body.password, { minLength: 6, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1 })) {
        return res.status(400).json({ response: 'Invalid password' });
    }

    console.log("phone "+ emailphone);
    console.log("OTP "+ otp);
    let fname = req.body.first_name;
    let lname = req.body.last_name;
    let phone = req.body.phone_no;
    let email = req.body.email;
   // let address = req.body.city + " , " + req.body.state + " , " + req.body.country;
    let password = req.body.password;
   // console.log(req.body);
   // const newUser = await SignupData.create({
        // user_OTP:
        // {
        //     mobile_no: emailphone,
        //     otp: otp
        // },
        // user_details:
        // {
        //     first_name: fname,
        //     last_name: lname,
        //     email: email,
        //     phone_no: phone,
        //     password: password,
        //     city: req.body.city,
        //     state:req.body.state,
        //     country:req.body.country
        // }
   // })
    console.log(newUser);
      const token=jwt.sign({id:newUser._id},SECRET_KEY)
      const result=await newUser.save()
      return res.json({status:201,message:'user created', data:result, token:token })

  
    //  res.json(datainfo);
    // return res.redirect('./')
});

// Validates a username
function validateUsername(username) {
    return !validator.isEmpty(username) && validator.isAlphanumeric(username) && validator.isLength(username, { min: 6, max: 32 });
}

//validates a mobile no
function validateMobileno(mobileno) {
    return !validator.isEmpty(mobileno) && validator.isMobilePhone(mobileno, 'any') && validator.isLength(mobileno, { min: 6, max: 14 });
}

module.exports = userRouter;